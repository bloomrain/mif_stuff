h1= link_to signals_collection.url, signals_collection.url
hr
h2 Original signals #{signals_collection.signals.formated.length}
= signals_collection.signals.formated
= line_chart signals_collection.signals.formated, colors: ['blue']
br
hr
br

h2 Fourier signals
= line_chart signals_collection.signals.fourier, colors: ['red']
br
hr
br

h1 Noise

= form_tag url_for, method: :get do
  p
    = label_tag :noise_type, 'Noise type '
    ul
      li: label
        = radio_button_tag :noise_type, :random_scope, noise_type == 'random_scope'
        | Random with interval
        ' 
        = number_field_tag :min_random, min_random, placeholder: 'min random'
        '  -
        = number_field_tag :max_random, max_random, placeholder: 'max random'
      li: label
        = radio_button_tag :noise_type, :brownian, noise_type == 'brownian'
        | Brownian
  p

  p= submit_tag 'ok'
hr


h2 Original signals
= line_chart signals_collection.signals(noise: noise).formated, colors: ['orange']
h2 Fourier
= line_chart signals_collection.signals(noise: noise).fourier, colors: ['orange']
h2 Power spectrum
= column_chart signals_collection.signals(noise: noise).power_spectrum
h2 Fourier
= line_chart [ {name: 'filter', data: signals_collection.signals(noise: noise, from_ck_number: filter_ck).fourier}, {name: 'fourier', data: signals_collection.signals.fourier }, {name: 'fourier + noise', data: signals_collection.signals.fourier }]

hr
= form_tag url_for, method: :get do
  label
    | Ck filter
    = number_field_tag :filter_ck, filter_ck