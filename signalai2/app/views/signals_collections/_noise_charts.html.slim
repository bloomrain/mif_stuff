h1 Options
= form_tag url_for, method: :get do
  p
    = label_tag :ck_noise_interval, 'Hz noise interval'
    '
    = select_tag :ck_noise_interval_from, options_for_select((0..signals_collection.signals.n/2).map{|k| [human_hz_from_k(k), k] }, ck_noise_interval_from), class: :number_select
    '  -
    = select_tag :ck_noise_interval_till, options_for_select((0..signals_collection.signals.n/2).map{|k| [human_hz_from_k(k), k] }, ck_noise_interval_till)
  p
    = label_tag :noise_type, 'Noise type '
    ul
      li: label
        = radio_button_tag :noise_type, :random_scope, noise_type == 'random_scope'
        | Random with interval
        '
        = number_field_tag :min_random, min_random, placeholder: 'min random'
        '  -
        = number_field_tag :max_random, max_random, placeholder: 'max random'
      li: label
        = radio_button_tag :noise_type, :brownian, noise_type == 'brownian'
        | Brownian
  p
    | Ck filter
    .compact-container: table.filter-options
      - (0..signals_collection.signals.n/2).to_a.in_groups_of(5).each do |k_group|
        tr
          - k_group.each do |k|
            td: label
              - next if k.nil?
              = check_box_tag :"filter_ck_list[]", k, filter_ck_list.include?(k)
              - if filter_ck_list.include?(k)
                b= human_hz_from_k(k)
              - else
                = human_hz_from_k(k)

  p= submit_tag 'ok'
hr


/ h2 Original signals + noise
/ = line_chart signals_collection.signals(noise: noise).formated, colors: ['orange']

h2 Original signals + c<sub>k</sub> noise
.compact-container: table.CSSTableGenerator
  tr
    th Hz
    th Original
    th Noise
    th Noise + filter
  - original_cks = signals_collection.signals.all_ck
  - filter_cks = signals_collection.signals(ck_noise: ck_noise, from_ck_number: filter_ck_list.first).all_ck
  - signals_collection.signals(ck_noise: ck_noise).all_ck.each.with_index do |noise_ck, i|
    tr
      td[style='text-align: right;'] #{human_hz_from_k i}.
      td= original_cks[i]
      td= noise_ck
      td= filter_cks[i]

/ = render 'hz_noise_charts'

= render 'standart_noise_charts'